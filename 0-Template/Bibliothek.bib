
@online{kuhn_go_2014,
  title = {Go {{Reactive}}: {{Blueprint}} for {{Future Applications}}},
  url = {https://www.youtube.com/watch?v=IGW5VcnJLuU},
  abstract = {The game has changed: we write interactive web applications, we distribute the processing of huge data sets and our services need to be available at all times. This new breed of applications comes with its own set of requirements and forces us to establish new blueprints for designing our systems. In this talk we ask the crucial questions along this path, show which answers work and which don’t, and distill the essence of the common theme—Going Reactive.},
  timestamp = {2016-02-28T15:32:12Z},
  author = {Kuhn, Roland},
  urldate = {2015-12-13},
  date = {2014-09-17}
}

@online{klang_reactive_2015,
  title = {Reactive Revealed 2/3: Elasticity, Scalability and Location Transparency in Reactive systems},
  url = {https://www.typesafe.com/resources/video/reactive-revealed-23-elasticity-scalability-and-location-transparency-in-reactive-systems},
  shorttitle = {Elasticity, Scalability and Location Transparency in Reactive systems},
  timestamp = {2016-02-22T14:52:14Z},
  author = {Klang, Viktor},
  urldate = {2015-12-08},
  date = {2015-08-19}
}

@book{nygard_release_2007,
  location = {{Raleigh, N.C}},
  title = {Release it!: design and deploy production-ready software},
  isbn = {978-0-9787392-1-8},
  shorttitle = {Release it!},
  pagetotal = {350},
  timestamp = {2016-03-12T16:41:03Z},
  series = {The pragmatic programmers},
  publisher = {{Pragmatic Bookshelf}},
  author = {Nygard, Michael T.},
  date = {2007},
  keywords = {Application software,Development,Software architecture,Testing}
}

@online{rappl_introduction_2016,
  title = {Introduction to Functional Reactive Programming with RxJS},
  url = {http://www.sitepoint.com/functional-reactive-programming-rxjs/},
  abstract = {Curious about functional reactive programming? Florian Rappl explains the concepts, working through several examples using the RxJS library.},
  timestamp = {2016-03-01T21:36:33Z},
  titleaddon = {SitePoint},
  author = {Rappl, Florian},
  urldate = {2016-03-01},
  date = {2016-02-25}
}

@online{fowler_lmax_2011,
  title = {The LMAX Architecture},
  url = {http://martinfowler.com/articles/lmax.html},
  abstract = {LMAX is a retail financial trading system that can handle that can 6 million orders per second on a single JVM thread. The business logic runs in-memory surrounded by disruptors using event sourcing.},
  timestamp = {2016-03-12T16:43:36Z},
  titleaddon = {martinfowler.com},
  author = {Fowler, Martin},
  urldate = {2016-03-12},
  date = {2011-07-12}
}

@online{jackson_how_2016,
  title = {How {{Synchronous REST Turns Microservices Back}} into {{Monoliths}}},
  url = {http://thenewstack.io/synchronous-rest-turns-microservices-back-monoliths/},
  abstract = {If you are breaking down a monolithic legacy application into a set of microservices, and if those microservices are communicating via REST (Representational State Transfer), then you still have, in effect, a monolithic application, asserted~Lightbend tech lead, James Roper. Roper laid down this heavy wisdom at the monthly New York Java Special Interest Group meeting ...},
  timestamp = {2016-05-30T14:49:05Z},
  titleaddon = {The New Stack},
  author = {Jackson, Joab},
  urldate = {2016-05-30},
  date = {2016-04-14},
  file = {Snapshot:/Users/alexandervetter/Library/Application Support/Zotero/Profiles/72zseyas.default/zotero/storage/2JGVFI5M/synchronous-rest-turns-microservices-back-monoliths.html:}
}

@inproceedings{hewitt_universal_1973,
  location = {{San Francisco, CA, USA}},
  title = {A {{Universal Modular ACTOR Formalism}} for {{Artificial Intelligence}}},
  url = {http://dl.acm.org/citation.cfm?id=1624775.1624804},
  timestamp = {2016-03-29T18:20:23Z},
  booktitle = {Proceedings of the 3rd {{International Joint Conference}} on {{Artificial Intelligence}}},
  series = {IJCAI'73},
  publisher = {{Morgan Kaufmann Publishers Inc.}},
  author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
  date = {1973},
  pages = {235--245}
}

@online{boner_trends_2015,
  title = {Reactive Trends on the JVM},
  url = {https://dzone.com/articles/reactive-trends-on-the-jvm},
  abstract = {Check out these Reactive trends on the JVM, including a look at what Reactive is, patterns, and event logging.},
  timestamp = {2016-02-26T09:36:51Z},
  titleaddon = {DZone Java Zone},
  author = {Bonér, Jonas},
  urldate = {2016-02-17},
  date = {2015-10-26}
}

@online{pike_concurrency_2012,
  title = {Concurrency is not Parallelism (it's better)},
  url = {http://concur.rspace.googlecode.com/hg/talk/concur.html},
  timestamp = {2016-03-13T13:21:54Z},
  author = {Pike, Rob},
  urldate = {2016-02-21},
  date = {2012-01-11}
}

@online{malawski_reactive_2015,
  title = {Reactive Revealed 1/3: Async NIO, Back-pressure and Message-driven vs Event-driven},
  url = {https://www.typesafe.com/resources/video/reactive-revealed-13-async-nio-back-pressure-and-message-driven-vs-event-driven},
  shorttitle = {Async NIO, Back-pressure and Message-driven vs Event-driven},
  timestamp = {2016-02-22T14:52:58Z},
  author = {Malawski, Konrad},
  urldate = {2015-12-08},
  date = {2015-07-30}
}

@collection{gamma_design_1995,
  location = {{Reading, Mass}},
  title = {Design patterns: elements of reusable object-oriented software},
  isbn = {978-0-201-63361-0},
  shorttitle = {Design patterns},
  pagetotal = {395},
  timestamp = {2016-03-12T16:40:20Z},
  series = {Addison-Wesley professional computing series},
  publisher = {{Addison-Wesley}},
  editor = {Gamma, Erich},
  date = {1995},
  keywords = {Computer software,Object-oriented programming (Computer science),Reusability,Software patterns}
}

@book{blackheath_functional_2015,
  title = {Functional {{Reactive Programming}}},
  isbn = {978-1-63343-010-5},
  timestamp = {2016-03-02T19:50:16Z},
  langid = {english},
  publisher = {{Manning Publications}},
  author = {Blackheath, Stephen and Jones, Anthony},
  date = {2015}
}

@incollection{amdahl_validity_1967,
  location = {{Sunnyvale, CA, USA}},
  title = {Validity of the Single Processor Approach to Achieving Large-Scale Computing Capabilities},
  timestamp = {2016-02-23T18:30:50Z},
  publisher = {{AFIPS spring joint computer conference}},
  author = {Amdahl, Gene},
  date = {1967},
  pages = {483--485}
}

@book{buschmann_pattern_2011,
  location = {{Chichester}},
  edition = {Reprinted August 2011},
  title = {A pattern language for distributed computing},
  isbn = {978-0-470-05902-9},
  pagetotal = {602},
  timestamp = {2016-03-19T13:50:16Z},
  number = {Frank Buschmann ... ; Vol. 4},
  series = {Pattern-oriented software architecture},
  publisher = {{Wiley}},
  author = {Buschmann, Frank and Henney, Kevlin and Schmidt, Douglas C. and Buschmann, Frank},
  date = {2011}
}

@online{blalock_virtuous_2014,
  title = {The Virtuous Developers Guide to Reactive Programming},
  url = {https://www.credera.com/blog/technology-insights/open-source-technology-insights/virtuous-developers-guide-reactive-programming/},
  timestamp = {2016-01-05T13:29:45Z},
  author = {Blalock, Micah},
  urldate = {2016-01-05},
  date = {2014-07-02}
}

@book{douglass_real-time_2003,
  location = {{Boston, MA}},
  title = {Real-{{Time Design Patterns}}: robust scalable architecture for {{Real}}-time systems},
  isbn = {978-0-201-69956-2},
  shorttitle = {Real-{{Time Design Patterns}}},
  pagetotal = {500},
  timestamp = {2016-03-12T17:14:33Z},
  series = {The Addison-Wesley object technology series},
  publisher = {{Addison-Wesley}},
  author = {Douglass, Bruce Powel},
  date = {2003},
  keywords = {Computer architecture,Real-time data processing,Software patterns}
}

@online{rotem_fallacies_2008,
  title = {Fallacies of Distributed Computing Explained},
  url = {http://www.rgoarchitects.com/Files/fallacies.pdf},
  timestamp = {2016-02-26T09:36:34Z},
  author = {Rotem-Gal-Oz, Arnon},
  urldate = {2016-02-24},
  date = {2008}
}

@online{thompson_memory_2012,
  title = {Memory Access Patterns Are Important},
  url = {http://mechanical-sympathy.blogspot.com/2012/08/memory-access-patterns-are-important.html},
  shorttitle = {Mechanical Sympathy},
  timestamp = {2016-03-13T13:22:20Z},
  titleaddon = {Mechanical Sympathy},
  author = {Thompson, Martin},
  urldate = {2016-03-12},
  date = {2012-08-05}
}

@online{martin_single_2014,
  title = {The {{Single Responsibility Principle}}},
  url = {http://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html},
  abstract = {The Single Responsibility Principle (SRP) states that each software module should have one and only one reason to change. This sounds good, and seems to align with Parnas' formulation. However it begs the question: What defines a reason to change?},
  timestamp = {2016-04-09T12:54:31Z},
  titleaddon = {Clean Coder Blog},
  author = {Martin, Robert},
  urldate = {2016-04-09},
  date = {2014-05-08}
}

@online{thompson_single_2011,
  title = {Single {{Writer Principle}}},
  url = {http://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html},
  shorttitle = {Mechanical {{Sympathy}}},
  timestamp = {2016-03-12T16:44:30Z},
  titleaddon = {Mechanical Sympathy},
  author = {Thompson, Martin},
  urldate = {2016-03-12},
  date = {2011-09-22}
}

@book{alexander_pattern_1977,
  location = {{New York}},
  title = {A pattern language: towns, buildings, construction},
  isbn = {978-0-19-501919-3},
  shorttitle = {A pattern language},
  pagetotal = {1171},
  timestamp = {2016-03-06T15:21:48Z},
  publisher = {{Oxford University Press}},
  author = {Alexander, Christopher and Ishikawa, Sara and Silverstein, Murray},
  date = {1977},
  keywords = {Semiotics,Symbolism in architecture}
}

@online{webber_what_2014,
  title = {What is {{Reactive Programming}}?},
  url = {https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc},
  shorttitle = {What is {{Reactive Programming}}?},
  abstract = {Exploring the guiding principles of Reactive application development.},
  timestamp = {2016-02-18T10:46:58Z},
  titleaddon = {Medium},
  author = {Webber, Kevin},
  urldate = {2016-02-18},
  date = {2014-08-19}
}

@report{thompson_disruptor_2011,
  title = {Disruptor},
  url = {http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf},
  timestamp = {2016-03-13T13:21:34Z},
  author = {Thompson, Martin and Farley, Dave and Barker, Michael and Gee, Patricia and Stewart, Andrew},
  urldate = {2016-03-12},
  date = {2011-05}
}

@online{seeger_event-driven_2010,
  title = {Event-{{Driven I}}/{{O A}} hands-on introduction},
  url = {http://blog.marc-seeger.de/assets/papers/seeger-aysnc_io.pdf},
  abstract = {This paper gives a short introduction to the topic of asynchronous, event-driven I/O, explains the underlying "reactor" pattern and introduces the usage of lightweight threads to help with readability of event-driven
code.},
  timestamp = {2016-03-27T12:44:09Z},
  author = {Seeger, Marc},
  urldate = {2016-03-27},
  date = {2010-08-08}
}

@report{Lee:EECS-2006-1,
  title = {The {{Problem}} with {{Threads}}},
  url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.html},
  abstract = {Threads are a seemingly straightforward adaptation of the dominant sequential model of computation to concurrent systems. Languages require little or no syntactic changes to support threads, and operating systems and architectures have evolved to efficiently support them. Many technologists are pushing for increased use of multithreading in software in order to take advantage of the predicted increases in parallelism in computer architectures. In this paper, I argue that this is not a good idea. Although threads seem to be a small step from sequential computation, in fact, they represent a huge step. They discard the most essential and appealing properties of sequential computation: understandability, predictability, and determinism. Threads, as a model of computation, are wildly nondeterministic, and the job of the programmer becomes one of pruning that nondeterminism. Although many research techniques improve the model by offering more effective pruning, I argue that this is approaching the problem backwards. Rather than pruning nondeterminism, we should build from essentially deterministic, composable components. Nondeterminism should be explicitly and judiciously introduced where needed, rather than removed where not needed. The consequences of this principle are profound. I argue for the development of concurrent coordination languages based on sound, composable formalisms. I believe that such languages will yield much more reliable, and more concurrent programs.},
  timestamp = {2016-03-12T16:47:31Z},
  number = {UCB/EECS-2006-1},
  institution = {{EECS Department, University of California, Berkeley}},
  author = {Lee, Edward A.},
  urldate = {2016-03-12},
  date = {2006-01},
  note = {The published version of this paper is in IEEE Computer 39(5):33-42, May 2006.}
}

@online{jones_boost_2006,
  title = {Boost application performance using asynchronous {{I}}/{{O}}},
  rights = {© Copyright~IBM Corporation~2006},
  url = {https://www.ibm.com/developerworks/library/l-async/},
  timestamp = {2016-03-19T13:40:56Z},
  langid = {english},
  type = {{{CT316}}},
  author = {Jones, M. Tim},
  urldate = {2016-03-19},
  date = {2006-08-29}
}

@article{friedrichsen_unkaputtbar_2014,
  title = {Unkaputtbar},
  volume = {4.2014},
  timestamp = {2016-04-17T16:27:00Z},
  langid = {german},
  journaltitle = {Business Technology},
  author = {Friedrichsen, Uwe},
  date = {2014-04},
  pages = {48--53}
}

@article{shore_fail_2004,
  title = {Fail Fast},
  volume = {21},
  timestamp = {2016-04-29T11:55:01Z},
  journal = {IEEE Softw.},
  author = {Shore, Jim},
  date = {2004-09},
  pages = {S. 21--25}
}

@book{hohpe_enterprise_2004,
  location = {{Boston}},
  title = {Enterprise integration patterns: designing, building, and deploying messaging solutions},
  isbn = {978-0-321-20068-6},
  shorttitle = {Enterprise integration patterns},
  pagetotal = {683},
  timestamp = {2016-03-13T13:23:47Z},
  series = {The Addison-Wesley signature series},
  publisher = {{Addison-Wesley}},
  author = {Hohpe, Gregor and Woolf, Bobby},
  date = {2004},
  keywords = {Management information systems,Message processing,Telecommunication}
}

@online{sutter_free_2004,
  title = {The Free Lunch Is Over - A Fundamental Turn Toward Concurrency in Software},
  url = {http://www.gotw.ca/publications/concurrency-ddj.htm},
  timestamp = {2016-02-19T12:03:17Z},
  author = {Sutter, Herb},
  urldate = {2016-02-19},
  date = {2004-12}
}

@online{meijer_react_2014,
  title = {React 2014 : Erik Meijer - What does it mean to be Reactive?},
  url = {https://www.youtube.com/watch?v=sTSQlYX5DU0},
  shorttitle = {What does it mean to be Reactive?},
  abstract = {The inimitable Erik Meijer delivering his opening keynote to React 2014},
  timestamp = {2016-03-13T13:22:15Z},
  author = {Meijer, Erik},
  urldate = {2016-03-05},
  date = {2014-04-09}
}

@book{rotem_soa_2012,
  location = {{Shelter Island, NY}},
  title = {{{SOA}} patterns},
  isbn = {978-1-933988-26-9},
  pagetotal = {269},
  timestamp = {2016-04-15T20:10:48Z},
  publisher = {{Manning}},
  author = {Rotem-Gal-Oz, Arnon},
  date = {2012},
  keywords = {Service-oriented architecture (Computer science)}
}

@online{boner_defining_2016,
  title = {Defining a reactive microservice},
  url = {https://www.oreilly.com/ideas/defining-a-reactive-microservice},
  abstract = {Two characteristics to consider when building a microservices-based architecture.},
  timestamp = {2016-03-20T16:21:49Z},
  titleaddon = {O'Reilly Media},
  author = {Bonér, Jonas},
  urldate = {2016-03-01},
  date = {2016-02-23}
}

@online{boner_reactive_2014,
  title = {The Reactive Manifesto},
  url = {http://www.reactivemanifesto.org},
  timestamp = {2016-01-05T13:20:19Z},
  author = {Bonér, Jonas and Farley, Dave and Kuhn, Roland and Thompson, Martin},
  urldate = {2016-01-05},
  date = {2014-09-16}
}

@online{graauw_nobody_2010,
  title = {Nobody {{Needs Reliable Messaging}}},
  url = {https://www.infoq.com/articles/no-reliable-messaging},
  abstract = {Marc de Graauw challenges the notion that transport-level reliability mechanisms like WS-ReliableMessaging are needed, showing how business-specific logic for in-order and exactly-once processing do the job much better with examples from Dutch Healthcare's SOA.},
  timestamp = {2016-05-22T11:20:50Z},
  titleaddon = {InfoQ},
  author = {de Graauw, Marc},
  urldate = {2016-05-22},
  date = {2010-06-18}
}

@book{newman_building_2015,
  location = {{Beijing}},
  edition = {1. ed},
  title = {Building microservices: {[}designing fine-grained systems]},
  isbn = {978-1-4919-5035-7},
  shorttitle = {Building microservices},
  pagetotal = {259},
  timestamp = {2016-03-12T16:41:39Z},
  publisher = {{O'Reilly}},
  author = {Newman, Sam},
  date = {2015}
}

@book{armstrong_programming_2013,
  location = {{Dallas, Tex.}},
  edition = {2. ed},
  title = {Programming Erlang: software for a concurrent world},
  isbn = {978-1-937785-53-6},
  shorttitle = {Programming Erlang},
  pagetotal = {520},
  timestamp = {2016-02-22T16:34:19Z},
  series = {The pragmatic programmers},
  publisher = {{Pragmatic Bookshelf}},
  author = {Armstrong, Joe},
  date = {2013},
  keywords = {ERLANG,ERLANG (Computer program language)}
}

@online{mccaffrey_goto_2015,
  title = {GOTO Conferences: Applying the Saga Pattern},
  url = {https://www.youtube.com/watch?v=xDuwrtwYHu8},
  shorttitle = {Applying the Saga Pattern},
  abstract = {As we build larger more complex applications and solutions that need to do collaborative processing the traditional ACID transaction model using coordinated 2-phase commit is often no longer suitable...},
  timestamp = {2016-05-25T15:02:00Z},
  author = {McCaffrey, Caitie},
  urldate = {2016-05-25},
  date = {2015-05-12},
  keywords = {Caitie McCaffrey,Computer Science (Field Of Study),GOTO,GOTOcon,GOTO Conference,Mathematics (Field Of Study),Programming Language (Software Genre),Software (Industry)}
}

@online{thompson_memory_2011,
  title = {Memory {{Barriers}}/{{Fences}}},
  url = {http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html},
  shorttitle = {Mechanical {{Sympathy}}},
  timestamp = {2016-03-12T16:44:55Z},
  titleaddon = {Mechanical Sympathy},
  author = {Thompson, Martin},
  urldate = {2016-03-12},
  date = {2011-07-24}
}

@online{schmidt_reactor_1994,
  title = {Reactor},
  url = {http://www.cs.wustl.edu/~schmidt/PDF/reactor-siemens.pdf},
  abstract = {An Object Behavioral Pattern for
Demultiplexing and Dispatching Handles for Synchronous Events},
  timestamp = {2016-03-27T12:43:07Z},
  author = {Schmidt, Douglas C.},
  urldate = {2016-03-27},
  date = {1994-08}
}

@book{vernon_reactive_2016,
  location = {{New York}},
  title = {Reactive messaging patterns with {{Actor}} model: application and integration patterns in {{Scala}} and {{Akka}}},
  isbn = {978-0-13-384683-6},
  shorttitle = {Reactive messaging patterns with {{Actor}} model},
  pagetotal = {448},
  timestamp = {2016-01-05T12:36:22Z},
  publisher = {{Addison-Wesley}},
  author = {Vernon, Vaughn},
  date = {2016},
  keywords = {Application software,Business enterprises,Computer multitasking,Data processing,Development,Java virtual machine,Mathematics,Scala (Computer program language)}
}

@online{akka_message_2016,
  title = {Message {{Delivery Reliability}}},
  url = {http://doc.akka.io/docs/akka/2.4.5/general/message-delivery-reliability.html},
  timestamp = {2016-05-22T09:24:40Z},
  titleaddon = {Akka Documentation},
  author = {{Akka}},
  urldate = {2016-05-22},
  date = {2016-05-16}
}

@online{binstock_interview_2012,
  title = {Interview with {{Alan Kay}}},
  url = {http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442},
  abstract = {The pioneer of object-orientation, co-designer of Smalltalk, and UI luminary opines on programming, browsers, objects, the illusion of patterns, and how Socrates could still make it to heaven.},
  timestamp = {2016-03-29T18:27:51Z},
  titleaddon = {Dr. Dobb's},
  author = {Binstock, Andrew},
  urldate = {2016-03-29},
  date = {2012-07-10}
}

@article{erb_concurrent_2012,
  title = {Concurrent {{Programming}} for {{Scalable Web Architectures}}},
  url = {http://www.benjamin-erb.de/thesis},
  timestamp = {2016-03-19T14:06:58Z},
  issue = {VS-D01-2012},
  author = {Erb, Benjamin},
  date = {2012-04},
  keywords = {architecture,concurrency,scalability,web}
}

@inproceedings{garcia-molina_sagas_1987,
  location = {{New York, NY, USA}},
  title = {Sagas},
  isbn = {978-0-89791-236-5},
  url = {http://doi.acm.org/10.1145/38713.38742},
  doi = {10.1145/38713.38742},
  abstract = {Long lived transactions (LLTs) hold on to database resources for relatively long periods of time, significantly delaying the termination of shorter and more common transactions. To alleviate these problems we propose the notion of a saga. A LLT is a saga if it can be written as a sequence of transactions that can be interleaved with other transactions. The database management system guarantees that either all the transactions in a saga are successfully completed or compensating transactions are run to amend a partial execution. Both the concept of saga and its implementation are relatively simple, but they have the potential to improve performance significantly. We analyze the various implementation issues related to sagas, including how they can be run on an existing system that does not directly support them. We also discuss techniques for database and LLT design that make it feasible to break up LLTs into sagas.},
  timestamp = {2016-05-25T14:46:10Z},
  booktitle = {Proceedings of the 1987 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {SIGMOD '87},
  publisher = {{ACM}},
  author = {Garcia-Molina, Hector and Salem, Kenneth},
  urldate = {2016-05-25},
  date = {1987},
  pages = {249--259}
}

@incollection{harel_development_1985,
  location = {{New York, NY, USA}},
  title = {On the development of reactive systems},
  isbn = {0-387-15181-8},
  url = {http://dl.acm.org/citation.cfm?id=101969.101990},
  timestamp = {2016-01-07T17:31:22Z},
  booktitle = {Logics and {{Models}} of {{Concurrent Systems}}},
  publisher = {{Springer-Verlag New York, Inc.}},
  author = {Harel, D. and Pnueli, A.},
  editor = {Apt, Krzysztof R.},
  date = {1985},
  pages = {477--498}
}

@online{kuhn_code_2015,
  title = {Code Mesh 2015 - Reactive Design Patterns},
  url = {http://www.codemesh.io/codemesh2015/roland-kuhn},
  shorttitle = {Reactive Design Patterns},
  abstract = {Our software needs to become reactive, this realization is widely understood: we need to consider responsiveness, maintainability, elasticity and scalability from the outset. Not all systems need to implement all these to the same degree, specific project requirements will determine where effort is most wisely spent, but in the vast majority of cases the need to go reactive will demand that we design our applications differently.

In this presentation we explore several architecture elements that are commonly found in reactive systems (like the circuit breaker, various replication techniques, or flow control protocols). These patterns are language agnostic and also independent of the abundant choice of reactive programming frameworks and libraries, they are well-specified starting points for exploring the design space of a concrete problem: thinking is strictly required!},
  timestamp = {2016-02-22T14:56:48Z},
  author = {Kuhn, Roland},
  urldate = {2016-02-15},
  date = {2015-11-19}
}

@inproceedings{ousterhout_why_1996,
  title = {Why {{Threads Are A Bad Idea}} (for most purposes)},
  url = {http://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf},
  eventtitle = {USENIX 1996 Technical Conference},
  timestamp = {2016-03-20T16:27:22Z},
  author = {Ousterhout, John},
  urldate = {2016-03-20},
  date = {1996-06}
}

@report{waldo_note_1994,
  title = {A {{Note}} on {{Distributed Computing}}},
  url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628},
  abstract = {We argue that objects that interact in a distributed system need to be dealt with in ways that are intrinsically different from objects that interact in a single address space. These differences are required because distributed systems require that the programmer be aware of latency, have a different model of memory access, and take into account issues of concurrency and partial failure. We look at a number of distributed systems that have attempted to paper over the distinction between local and remote objects, and show that such systems fail to support basic requirements of robustness and reliability. These failures have been masked in the past by the small size of the distributed systems that have been built. In the enterprise-wide distributed systems foreseen in the near future, however, such a masking will be impossible. We conclude by discussing what is required of both systems-level and application-level programmers and designers if one is to take distribution seriously.},
  timestamp = {2016-02-24T15:29:17Z},
  institution = {{IEEE Micro}},
  author = {Waldo, Jim and Wyant, Geoff and Wollrath, Ann and Kendall, Sam},
  date = {1994}
}

@online{boner_reactive_2015,
  title = {Reactive Revealed 3/3: Resiliency, Failures vs Errors, Isolation, Delegation and Replication},
  url = {https://www.typesafe.com/resources/video/reactive-revealed-33-resiliency-failures-vs-errors-isolation-and-containment-delegation-and-replication-in-reactive-systems},
  shorttitle = {Resiliency, Failures vs Errors, Isolation, Delegation and Replication},
  timestamp = {2016-02-22T14:53:42Z},
  author = {Bonér, Jonas},
  urldate = {2015-12-10},
  date = {2015-09-03}
}

@article{hughes_why_1989,
  title = {Why {{Functional Programming Matters}}},
  volume = {32},
  timestamp = {2016-03-02T20:21:45Z},
  number = {2},
  journal = {Comput. J.},
  author = {Hughes, J.},
  date = {1989},
  pages = {98--107}
}

@book{butcher_seven_2014,
  location = {{Dallas, Texas}},
  title = {Seven concurrency models in seven weeks: when threads unravel},
  isbn = {978-1-937785-65-9},
  shorttitle = {Seven concurrency models in seven weeks},
  pagetotal = {275},
  timestamp = {2016-01-05T12:40:00Z},
  series = {The pragmatic programmers},
  publisher = {{Pragmatic Bookshelf}},
  author = {Butcher, Paul},
  date = {2014},
  keywords = {Computer multitasking,Parallel programming (Computer science)}
}

@book{chiusano_functional_2015,
  location = {{Shelter Island, NY}},
  title = {Functional programming in {{Scala}}},
  isbn = {978-1-61729-065-7},
  pagetotal = {300},
  timestamp = {2016-02-27T12:05:07Z},
  publisher = {{Manning Publications}},
  author = {Chiusano, Paul and Bjarnason, Rúnar},
  date = {2015},
  keywords = {Functional programming (Computer science),Scala (Computer program language)}
}

@book{kuhn_reactive_2015,
  title = {Reactive design patterns},
  isbn = {978-1-61729-180-7},
  timestamp = {2016-03-02T19:49:28Z},
  publisher = {{Manning Publications}},
  author = {Kuhn, Roland},
  date = {2015}
}

@online{wieringa_design_2003,
  title = {Design Methods for Reactive Systems (Slides)},
  url = {http://booksite.elsevier.com/9781558607552/slides/slides.pdf},
  timestamp = {2016-02-22T14:49:46Z},
  author = {Wieringa, Roel},
  urldate = {2016-01-08},
  date = {2003}
}

@online{wampler_react_2014,
  title = {React 2014 : Dean Wampler - Reactive Design \& Language Paradigms},
  url = {https://www.youtube.com/watch?v=4L3cYhfSUZs},
  shorttitle = {Reactive Design \& Language Paradigms},
  abstract = {Can reactive designs be implemented in any programming language? Or, are some languages and programming paradigms better for building reactive systems? How do traditional design approaches, like Object-Oriented Design (OOD) and Domain-Driven Design (DDD), apply to reactive applications. The Reactive Manifesto strikes a balance between specifying the essential features for reactive systems and allowing implementation variations appropriate for each language and execution environment.

In this presentation Dean compares and contrasts different techniques, like Reactive Streams, callbacks, Actors, Futures, and Functional Reactive Programming (FRP), and shows examples of how they are realised in various languages and toolkits. And he provides a personal opinion on the relative strengths and weaknesses of the language options for building reactive applications more effectively.},
  timestamp = {2016-02-22T14:55:31Z},
  author = {Wampler, Dean},
  urldate = {2015-12-05},
  date = {2014-04-15}
}

@online{kegel_c10k_2014,
  title = {The C10K problem},
  url = {http://www.kegel.com/c10k.html},
  timestamp = {2016-03-19T15:48:03Z},
  author = {Kegel, Dan},
  urldate = {2016-03-19},
  date = {2014-02-05}
}

@book{carkci_dataflow_2014,
  title = {Dataflow and Reactive Programming Systems},
  isbn = {978-1-4974-2244-5},
  abstract = {A Practical Guide to Developing Dataflow and Reactive Programming Systems},
  pagetotal = {153},
  timestamp = {2016-03-02T19:43:02Z},
  publisher = {{CreateSpace Independent Publishing Platform}},
  author = {Carkci, Matt},
  date = {2014-05-29}
}

@book{hanmer_patterns_2007,
  location = {{Chichester, England ; Hoboken, NJ}},
  title = {Patterns for fault tolerant software},
  isbn = {978-0-470-31979-6},
  pagetotal = {287},
  timestamp = {2016-05-01T19:53:22Z},
  publisher = {{John Wiley}},
  author = {Hanmer, Robert S.},
  date = {2007},
  keywords = {Fault-tolerant computing}
}

@online{reactivex_2014,
  title = {{{ReactiveX}} - {{Observable}}},
  url = {http://reactivex.io/documentation/observable.html},
  timestamp = {2016-04-10T11:00:42Z},
  urldate = {2016-04-10},
  date = {2014}
}


