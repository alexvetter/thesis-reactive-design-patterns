
@online{kuhn_go_2014,
  title = {Go {{Reactive}}: {{Blueprint}} for {{Future Applications}}},
  url = {https://www.youtube.com/watch?v=IGW5VcnJLuU},
  abstract = {The game has changed: we write interactive web applications, we distribute the processing of huge data sets and our services need to be available at all times. This new breed of applications comes with its own set of requirements and forces us to establish new blueprints for designing our systems. In this talk we ask the crucial questions along this path, show which answers work and which don’t, and distill the essence of the common theme—Going Reactive.},
  timestamp = {2016-02-28T15:32:12Z},
  author = {Kuhn, Roland},
  urldate = {2015-12-13},
  date = {2014-09-17}
}

@online{klang_reactive_2015,
  title = {Reactive Revealed 2/3: Elasticity, Scalability and Location Transparency in Reactive systems},
  url = {https://www.typesafe.com/resources/video/reactive-revealed-23-elasticity-scalability-and-location-transparency-in-reactive-systems},
  shorttitle = {Elasticity, Scalability and Location Transparency in Reactive systems},
  timestamp = {2016-02-22T14:52:14Z},
  author = {Klang, Viktor},
  urldate = {2015-12-08},
  date = {2015-08-19}
}

@online{rappl_introduction_2016,
  title = {Introduction to Functional Reactive Programming with RxJS},
  url = {http://www.sitepoint.com/functional-reactive-programming-rxjs/},
  abstract = {Curious about functional reactive programming? Florian Rappl explains the concepts, working through several examples using the RxJS library.},
  timestamp = {2016-03-01T21:36:33Z},
  titleaddon = {SitePoint},
  author = {Rappl, Florian},
  urldate = {2016-03-01},
  date = {2016-02-25}
}

@online{boner_trends_2015,
  title = {Reactive Trends on the JVM},
  url = {https://dzone.com/articles/reactive-trends-on-the-jvm},
  abstract = {Check out these Reactive trends on the JVM, including a look at what Reactive is, patterns, and event logging.},
  timestamp = {2016-02-26T09:36:51Z},
  titleaddon = {DZone Java Zone},
  author = {Bonér, Jonas},
  urldate = {2016-02-17},
  date = {2015-10-26}
}

@online{boner_defining_2016,
  title = {Defining a reactive microservice},
  url = {https://www.oreilly.com/ideas/defining-a-reactive-microservice},
  abstract = {Two characteristics to consider when building a microservices-based architecture.},
  timestamp = {2016-03-01T21:37:49Z},
  titleaddon = {O'Reilly Media},
  author = {Bonér, Jonas},
  urldate = {2016-03-01},
  date = {2016-02-23}
}

@online{pike_concurrency_2012,
  title = {Concurrency is not Parallelism (it's better)},
  url = {http://concur.rspace.googlecode.com/hg/talk/concur.html},
  timestamp = {2016-02-22T14:59:00Z},
  author = {Pike, Rob},
  urldate = {2016-02-21},
  date = {2012-01-11}
}

@online{malawski_reactive_2015,
  title = {Reactive Revealed 1/3: Async NIO, Back-pressure and Message-driven vs Event-driven},
  url = {https://www.typesafe.com/resources/video/reactive-revealed-13-async-nio-back-pressure-and-message-driven-vs-event-driven},
  shorttitle = {Async NIO, Back-pressure and Message-driven vs Event-driven},
  timestamp = {2016-02-22T14:52:58Z},
  author = {Malawski, Konrad},
  urldate = {2015-12-08},
  date = {2015-07-30}
}

@book{blackheath_functional_2015,
  title = {Functional {{Reactive Programming}}},
  isbn = {978-1-63343-010-5},
  timestamp = {2016-03-02T19:50:16Z},
  langid = {english},
  publisher = {{Manning Publications}},
  author = {Blackheath, Stephen and Jones, Anthony},
  date = {2015}
}

@incollection{amdahl_validity_1967,
  location = {{Sunnyvale, CA, USA}},
  title = {Validity of the Single Processor Approach to Achieving Large-Scale Computing Capabilities},
  timestamp = {2016-02-23T18:30:50Z},
  publisher = {{AFIPS spring joint computer conference}},
  author = {Amdahl, Gene},
  date = {1967},
  pages = {483--485}
}

@online{blalock_virtuous_2014,
  title = {The Virtuous Developers Guide to Reactive Programming},
  url = {https://www.credera.com/blog/technology-insights/open-source-technology-insights/virtuous-developers-guide-reactive-programming/},
  timestamp = {2016-01-05T13:29:45Z},
  author = {Blalock, Micah},
  urldate = {2016-01-05},
  date = {2014-07-02}
}

@online{rotem_fallacies_2008,
  title = {Fallacies of Distributed Computing Explained},
  url = {http://www.rgoarchitects.com/Files/fallacies.pdf},
  timestamp = {2016-02-26T09:36:34Z},
  author = {Rotem-Gal-Oz, Arnon},
  urldate = {2016-02-24},
  date = {2008}
}

@book{alexander_pattern_1977,
  location = {{New York}},
  title = {A pattern language: towns, buildings, construction},
  isbn = {978-0-19-501919-3},
  shorttitle = {A pattern language},
  pagetotal = {1171},
  timestamp = {2016-03-06T15:21:48Z},
  publisher = {{Oxford University Press}},
  author = {Alexander, Christopher and Ishikawa, Sara and Silverstein, Murray},
  date = {1977},
  keywords = {Semiotics,Symbolism in architecture}
}

@online{webber_what_2014,
  title = {What is {{Reactive Programming}}?},
  url = {https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc},
  shorttitle = {What is {{Reactive Programming}}?},
  abstract = {Exploring the guiding principles of Reactive application development.},
  timestamp = {2016-02-18T10:46:58Z},
  titleaddon = {Medium},
  author = {Webber, Kevin},
  urldate = {2016-02-18},
  date = {2014-08-19}
}

@online{sutter_free_2004,
  title = {The Free Lunch Is Over - A Fundamental Turn Toward Concurrency in Software},
  url = {http://www.gotw.ca/publications/concurrency-ddj.htm},
  timestamp = {2016-02-19T12:03:17Z},
  author = {Sutter, Herb},
  urldate = {2016-02-19},
  date = {2004-12}
}

@online{meijer_react_2014,
  title = {React 2014 : Erik Meijer - What does it mean to be Reactive?},
  url = {https://www.youtube.com/watch?v=sTSQlYX5DU0},
  shorttitle = {What does it mean to be Reactive?},
  abstract = {The inimitable Erik Meijer delivering his opening keynote to React 2014},
  timestamp = {2016-03-05T13:55:31Z},
  author = {Meijer, Erik},
  urldate = {2016-03-05},
  date = {2014-04-09}
}

@online{boner_reactive_2014,
  title = {The Reactive Manifesto},
  url = {http://www.reactivemanifesto.org},
  timestamp = {2016-01-05T13:20:19Z},
  author = {Bonér, Jonas and Farley, Dave and Kuhn, Roland and Thompson, Martin},
  urldate = {2016-01-05},
  date = {2014-09-16}
}

@book{armstrong_programming_2013,
  location = {{Dallas, Tex.}},
  edition = {2. ed},
  title = {Programming Erlang: software for a concurrent world},
  isbn = {978-1-937785-53-6},
  shorttitle = {Programming Erlang},
  pagetotal = {520},
  timestamp = {2016-02-22T16:34:19Z},
  series = {The pragmatic programmers},
  publisher = {{Pragmatic Bookshelf}},
  author = {Armstrong, Joe},
  date = {2013},
  keywords = {ERLANG,ERLANG (Computer program language)}
}

@book{vernon_reactive_2016,
  location = {{New York}},
  title = {Reactive messaging patterns with {{Actor}} model: application and integration patterns in {{Scala}} and {{Akka}}},
  isbn = {978-0-13-384683-6},
  shorttitle = {Reactive messaging patterns with {{Actor}} model},
  pagetotal = {448},
  timestamp = {2016-01-05T12:36:22Z},
  publisher = {{Addison-Wesley}},
  author = {Vernon, Vaughn},
  date = {2016},
  keywords = {Application software,Business enterprises,Computer multitasking,Data processing,Development,Java virtual machine,Mathematics,Scala (Computer program language)}
}

@incollection{harel_development_1985,
  location = {{New York, NY, USA}},
  title = {On the development of reactive systems},
  isbn = {0-387-15181-8},
  url = {http://dl.acm.org/citation.cfm?id=101969.101990},
  timestamp = {2016-01-07T17:31:22Z},
  booktitle = {Logics and {{Models}} of {{Concurrent Systems}}},
  publisher = {{Springer-Verlag New York, Inc.}},
  author = {Harel, D. and Pnueli, A.},
  editor = {Apt, Krzysztof R.},
  date = {1985},
  pages = {477--498}
}

@online{kuhn_code_2015,
  title = {Code Mesh 2015 - Reactive Design Patterns},
  url = {http://www.codemesh.io/codemesh2015/roland-kuhn},
  shorttitle = {Reactive Design Patterns},
  abstract = {Our software needs to become reactive, this realization is widely understood: we need to consider responsiveness, maintainability, elasticity and scalability from the outset. Not all systems need to implement all these to the same degree, specific project requirements will determine where effort is most wisely spent, but in the vast majority of cases the need to go reactive will demand that we design our applications differently.

In this presentation we explore several architecture elements that are commonly found in reactive systems (like the circuit breaker, various replication techniques, or flow control protocols). These patterns are language agnostic and also independent of the abundant choice of reactive programming frameworks and libraries, they are well-specified starting points for exploring the design space of a concrete problem: thinking is strictly required!},
  timestamp = {2016-02-22T14:56:48Z},
  author = {Kuhn, Roland},
  urldate = {2016-02-15},
  date = {2015-11-19}
}

@report{waldo_note_1994,
  title = {A {{Note}} on {{Distributed Computing}}},
  url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628},
  abstract = {We argue that objects that interact in a distributed system need to be dealt with in ways that are intrinsically different from objects that interact in a single address space. These differences are required because distributed systems require that the programmer be aware of latency, have a different model of memory access, and take into account issues of concurrency and partial failure. We look at a number of distributed systems that have attempted to paper over the distinction between local and remote objects, and show that such systems fail to support basic requirements of robustness and reliability. These failures have been masked in the past by the small size of the distributed systems that have been built. In the enterprise-wide distributed systems foreseen in the near future, however, such a masking will be impossible. We conclude by discussing what is required of both systems-level and application-level programmers and designers if one is to take distribution seriously.},
  timestamp = {2016-02-24T15:29:17Z},
  institution = {{IEEE Micro}},
  author = {Waldo, Jim and Wyant, Geoff and Wollrath, Ann and Kendall, Sam},
  date = {1994}
}

@online{boner_reactive_2015,
  title = {Reactive Revealed 3/3: Resiliency, Failures vs Errors, Isolation, Delegation and Replication},
  url = {https://www.typesafe.com/resources/video/reactive-revealed-33-resiliency-failures-vs-errors-isolation-and-containment-delegation-and-replication-in-reactive-systems},
  shorttitle = {Resiliency, Failures vs Errors, Isolation, Delegation and Replication},
  timestamp = {2016-02-22T14:53:42Z},
  author = {Bonér, Jonas},
  urldate = {2015-12-10},
  date = {2015-09-03}
}

@article{hughes_why_1989,
  title = {Why {{Functional Programming Matters}}},
  volume = {32},
  timestamp = {2016-03-02T20:21:45Z},
  number = {2},
  journal = {Comput. J.},
  author = {Hughes, J.},
  date = {1989},
  pages = {98--107}
}

@book{butcher_seven_2014,
  location = {{Dallas, Texas}},
  title = {Seven concurrency models in seven weeks: when threads unravel},
  isbn = {978-1-937785-65-9},
  shorttitle = {Seven concurrency models in seven weeks},
  pagetotal = {275},
  timestamp = {2016-01-05T12:40:00Z},
  series = {The pragmatic programmers},
  publisher = {{Pragmatic Bookshelf}},
  author = {Butcher, Paul},
  date = {2014},
  keywords = {Computer multitasking,Parallel programming (Computer science)}
}

@book{chiusano_functional_2015,
  location = {{Shelter Island, NY}},
  title = {Functional programming in {{Scala}}},
  isbn = {978-1-61729-065-7},
  pagetotal = {300},
  timestamp = {2016-02-27T12:05:07Z},
  publisher = {{Manning Publications}},
  author = {Chiusano, Paul and Bjarnason, Rúnar},
  date = {2015},
  keywords = {Functional programming (Computer science),Scala (Computer program language)}
}

@book{kuhn_reactive_2015,
  title = {Reactive design patterns},
  isbn = {978-1-61729-180-7},
  timestamp = {2016-03-02T19:49:28Z},
  publisher = {{Manning Publications}},
  author = {Kuhn, Roland},
  date = {2015}
}

@online{wieringa_design_2003,
  title = {Design Methods for Reactive Systems (Slides)},
  url = {http://booksite.elsevier.com/9781558607552/slides/slides.pdf},
  timestamp = {2016-02-22T14:49:46Z},
  author = {Wieringa, Roel},
  urldate = {2016-01-08},
  date = {2003}
}

@online{wampler_react_2014,
  title = {React 2014 : Dean Wampler - Reactive Design \& Language Paradigms},
  url = {https://www.youtube.com/watch?v=4L3cYhfSUZs},
  shorttitle = {Reactive Design \& Language Paradigms},
  abstract = {Can reactive designs be implemented in any programming language? Or, are some languages and programming paradigms better for building reactive systems? How do traditional design approaches, like Object-Oriented Design (OOD) and Domain-Driven Design (DDD), apply to reactive applications. The Reactive Manifesto strikes a balance between specifying the essential features for reactive systems and allowing implementation variations appropriate for each language and execution environment.

In this presentation Dean compares and contrasts different techniques, like Reactive Streams, callbacks, Actors, Futures, and Functional Reactive Programming (FRP), and shows examples of how they are realised in various languages and toolkits. And he provides a personal opinion on the relative strengths and weaknesses of the language options for building reactive applications more effectively.},
  timestamp = {2016-02-22T14:55:31Z},
  author = {Wampler, Dean},
  urldate = {2015-12-05},
  date = {2014-04-15}
}

@book{carkci_dataflow_2014,
  title = {Dataflow and Reactive Programming Systems},
  isbn = {978-1-4974-2244-5},
  abstract = {A Practical Guide to Developing Dataflow and Reactive Programming Systems},
  pagetotal = {153},
  timestamp = {2016-03-02T19:43:02Z},
  publisher = {{CreateSpace Independent Publishing Platform}},
  author = {Carkci, Matt},
  date = {2014-05-29}
}


